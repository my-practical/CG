#include<math.h>
#include <iostream>
#include <vector>
#include <GL/glut.h>
using namespace std;
int pntX1, pntY1, ch, edges;
vector<int> pntX;
vector<int> pntY;
int transX, transY; 
double scaleX, scaleY;
//char reflectionAxis;
int angleRad;
double round(double d)
{
 return floor(d + 0.5);
}
void drawPolygon()
{
glBegin(GL_POLYGON);
glColor3f(1.0, 0.0, 0.0);
for(int i = 0; i < edges; i++)
{
glVertex2i(pntX[i], pntY[i]);
}
glEnd();
}
void drawPolygonTrans(int x, int y)
{
glBegin(GL_POLYGON);
glColor3f(0.0, 1.0, 0.0);
for(int i = 0; i < edges; i++)
{
glVertex2i(pntX[i] + x, pntY[i] + y);
}
glEnd();
}
void drawPolygonScale(double x, double y)
{
glBegin(GL_POLYGON);
glColor3f(0.0, 0.0, 1.0);
for(int i = 0; i < edges; i++)
{
glVertex2i(round(pntX[i] * x), round(pntY[i] * y));
}
glEnd();
}
void drawPolygonRotation(double angleRad)
{
glBegin(GL_POLYGON);
glColor3f(0.0, 0.0, 1.0);
for (int i = 0; i < edges; i++)
{
glVertex2i(round((pntX[i] * cos(angleRad)) - (pntY[i] * 
sin(angleRad))), round((pntX[i] * sin(angleRad)) + (pntY[i] * 
cos(angleRad))));
}
glEnd();
}
void myInit (void)
{
glClearColor(1.0, 1.0, 1.0, 0.0);
glColor3f(1.0f, 1.0f, 1.0f);
glPointSize(4.0);
gluOrtho2D(0.0, 640.0, 0.0, 480.0);
}
void myDisplay()
{
int ch; 
glClear (GL_COLOR_BUFFER_BIT);
glColor3f (0.0, 0.0, 0.0);
 if (ch == 1)
{
drawPolygon();
drawPolygonTrans(transX, transY);
}
else if (ch == 2)
{
drawPolygon();
drawPolygonScale(scaleX, scaleY);
}
else if (ch==3)
{
drawPolygon();
drawPolygonRotation(angleRad);
}
glFlush ();
}
int main(int argc, char** argv)
{
int angle,ch;
cout << "\n\nFor Polygon:\n" << endl;
cout << "Enter no of edges: "; cin >> edges;
for (int i = 0; i < edges; i++)
{
cout << "Enter co-ordinates for vertex " << i + 1 << " : "; 
cin >> pntX1 >> pntY1;
pntX.push_back(pntX1);
pntY.push_back(pntY1);
}
cout << "1. Translation" << endl;
cout << "2. Scaling" << endl;
cout << "3. Rotation" << endl;
cout << "Enter your choice:\n\n" << endl;
 cin >> ch;
if(ch==1)
{
cout << "Enter the translation factor for X and Y: "; 
cin >> transX >> transY;
}
 else if(ch==2)
 {
cout << "Enter the scaling factor for X and Y: "; 
cin >> scaleX >> scaleY;
 }
else if(ch==3)
 {
cout << "Enter the angle for rotation: "; 
cin >> angle;
angleRad = angle * 3.1416 / 180;
}
glutInit(&argc, argv);
glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize (640, 480);
glutInitWindowPosition (0, 0);
glutCreateWindow ("Basic Transformations");
glutDisplayFunc(myDisplay);
myInit ();
glutMainLoop();
return 0;
}